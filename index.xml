<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Flowbased Polymer</title>
    <link>https://veith.github.io/flowbased-polymer/</link>
    <description>Recent content on Flowbased Polymer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Released under the MIT license</copyright>
    <lastBuildDate>Tue, 08 Mar 2016 21:07:13 +0100</lastBuildDate>
    
	<atom:link href="https://veith.github.io/flowbased-polymer/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Flowbased polymer</title>
      <link>https://veith.github.io/flowbased-polymer/index/</link>
      <pubDate>Tue, 08 Mar 2016 21:07:13 +0100</pubDate>
      
      <guid>https://veith.github.io/flowbased-polymer/index/</guid>
      <description>minimizing the gap between idea and its expression Flowbased-polymer is a polymer implementation (behaviour) of Flow-Based Programming (FBP-inspired System). Separating the control flow of web applications from the actual software logic.
Write your applications like you make the concept for your application. Normaly you draw a few components and some arrows to connect the components to describe your intention. Why you don&amp;rsquo;t do the same to write your app or component?</description>
    </item>
    
    <item>
      <title>Getting started</title>
      <link>https://veith.github.io/flowbased-polymer/getting-started/overview/</link>
      <pubDate>Wed, 09 Mar 2016 00:11:02 +0100</pubDate>
      
      <guid>https://veith.github.io/flowbased-polymer/getting-started/overview/</guid>
      <description>Installation Before you can use the flowbased-polymer behavior you need to install it in your project.
bower install flowbased-polymer --save  Import the behavior in your component &amp;lt;link rel=&amp;quot;import&amp;quot; href=&amp;quot;../flowbased-polymer/behaviour.html&amp;quot;&amp;gt;  OR
&amp;lt;link rel=&amp;quot;import&amp;quot; href=&amp;quot;../bower_components/flowbased-polymer/behaviour.html&amp;quot;&amp;gt;  ###Add the behaviour to your component
Polymer 1.x
{ behaviors: [Polymer.FlowBasedProgramming] }  Polymer 2.x
 &amp;lt;script&amp;gt; class MyComponent extends Polymer.mixinBehaviors([ Polymer.FlowBasedProgramming], Polymer.Element){ static get is() { return &#39;my-view1&#39;; } } window.customElements.define(MyComponent.is, MyComponent); &amp;lt;/script&amp;gt;  Tipp</description>
    </item>
    
    <item>
      <title>Connecting components</title>
      <link>https://veith.github.io/flowbased-polymer/wireing/overview/</link>
      <pubDate>Fri, 14 Apr 2017 15:47:54 +0200</pubDate>
      
      <guid>https://veith.github.io/flowbased-polymer/wireing/overview/</guid>
      <description>Given following example: We have a button and some elements. We want to hide a element-to-hide, after the user presses the hide button.
When you want to this in classical polymer, you have a lot of steps to do. This is not bad, but sometimes it is just to much work.
First you have to register on the event, then you have to assign id&amp;rsquo;s to the target elements, write the function in javascript and call the function on the element you want to hide from the javascript.</description>
    </item>
    
    <item>
      <title>Firing events</title>
      <link>https://veith.github.io/flowbased-polymer/events/overview/</link>
      <pubDate>Fri, 14 Apr 2017 16:38:32 +0200</pubDate>
      
      <guid>https://veith.github.io/flowbased-polymer/events/overview/</guid>
      <description>Elements use events to communicate state changes up the DOM tree to parent elements. Polymer elements can use the standard DOM APIs for creating, dispatching, and listening for events.
FBP also provides a notation for events (bubbling [^^e] and non bubbling [^e]), which allow you to specify events declaratively.
On the first view, it does not make a lot sense to rename events. But imagine a simple controller component with 3 buttons labeled with play, pause and next.</description>
    </item>
    
    <item>
      <title>Properties</title>
      <link>https://veith.github.io/flowbased-polymer/variables/overview/</link>
      <pubDate>Fri, 14 Apr 2017 16:39:52 +0200</pubDate>
      
      <guid>https://veith.github.io/flowbased-polymer/variables/overview/</guid>
      <description>Sometimes people want to store data in variables/properties. It is not necessarily needed for FBP, when your components you are using are designed appropriately. But so many users requested this feature.
Storing event-data to properties To store data from an event (event.detail) just use the @-event=&amp;rdquo;((property))&amp;rdquo; syntax. You have to use two brackets because the [ and the { are used in polymer itself.
&amp;lt;paper-button @-tap=&amp;quot;--searchClicked&amp;quot;&amp;gt;Search&amp;lt;/paper-button&amp;gt; &amp;lt;iron-ajax Æ’-generate-request=&amp;quot;--searchClicked&amp;quot; url=&amp;quot;https://www.googleapis.com/youtube/v3/search&amp;quot; handle-as=&amp;quot;json&amp;quot; params=&#39;{&amp;quot;part&amp;quot;:&amp;quot;snippet&amp;quot;, &amp;quot;q&amp;quot;:&amp;quot;polymer&amp;quot;, &amp;quot;key&amp;quot;: &amp;quot;YOUTUBE_API_KEY&amp;quot;, &amp;quot;type&amp;quot;: &amp;quot;video&amp;quot;}&#39; @-response=&amp;quot;^^data-received, ((searchResults))&amp;quot; debounce-duration=&amp;quot;300&amp;quot;&amp;gt;&amp;lt;/iron-ajax&amp;gt;  The event.</description>
    </item>
    
    <item>
      <title>Limitations</title>
      <link>https://veith.github.io/flowbased-polymer/limitations/overview/</link>
      <pubDate>Fri, 14 Apr 2017 16:49:27 +0200</pubDate>
      
      <guid>https://veith.github.io/flowbased-polymer/limitations/overview/</guid>
      <description>You can not use the FBP syntax in a template tag (&amp;lt;template is=&amp;quot;dom-repeat&amp;quot;&amp;gt;). It is not reachable for the behavior :-( .
Workaraound
&amp;lt;div @-click=&amp;quot;--elementClicked&amp;quot;&amp;gt; &amp;lt;template is=&amp;quot;dom-repeat&amp;quot; items=&amp;quot;[[list]]&amp;quot;&amp;gt; &amp;lt;paper-button&amp;gt;[[item.name]]&amp;lt;/paper-button&amp;gt; &amp;lt;/template&amp;gt; &amp;lt;/div&amp;gt;  Use &amp;ldquo;event-delegation&amp;rdquo; and add a additional container around the template tag and wire your elements there.</description>
    </item>
    
    <item>
      <title>Best practice</title>
      <link>https://veith.github.io/flowbased-polymer/bestpractice/overview/</link>
      <pubDate>Mon, 17 Apr 2017 14:02:04 +0200</pubDate>
      
      <guid>https://veith.github.io/flowbased-polymer/bestpractice/overview/</guid>
      <description>The best practices are a result from the feedback of our users, thanks to them.
Feel free to give us your feedback.
Wire and event naming In fact you can use any string to name wires, but most of the users are using two dashes in front of the wire name and for the name they use camelCase notation.
For the events they use the dashed-case notation, because the behavior does not convert the camelCase for the event to dash-case notation, which you will need to wire the event in another component.</description>
    </item>
    
    <item>
      <title>License</title>
      <link>https://veith.github.io/flowbased-polymer/license/index/</link>
      <pubDate>Wed, 09 Mar 2016 20:10:46 +0100</pubDate>
      
      <guid>https://veith.github.io/flowbased-polymer/license/index/</guid>
      <description>MIT license Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &amp;ldquo;Software&amp;rdquo;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</description>
    </item>
    
    <item>
      <title>History</title>
      <link>https://veith.github.io/flowbased-polymer/history/</link>
      <pubDate>Fri, 14 Apr 2017 16:52:45 +0200</pubDate>
      
      <guid>https://veith.github.io/flowbased-polymer/history/</guid>
      <description>After reading Flow-based Programming in 2013, i was fascinated by the concept. I wanted to build a version which is suited to make user interfaces, even there are a lot of comments which say FBP is not suited to build UIs. I tried a lot of variants (with jQuery, terrificjs, AngularJS,&amp;hellip; ) and was not successful, until i came across Polymer.
&amp;ndash; FBP&amp;rsquo;s orientation towards reuse also forces one to distinguish between a particular use of a component and its general definition.</description>
    </item>
    
    <item>
      <title>overview</title>
      <link>https://veith.github.io/flowbased-polymer/helper/overview/</link>
      <pubDate>Fri, 14 Apr 2017 16:49:59 +0200</pubDate>
      
      <guid>https://veith.github.io/flowbased-polymer/helper/overview/</guid>
      <description>&amp;lt;inspect-flow&amp;gt; coming soon</description>
    </item>
    
  </channel>
</rss>